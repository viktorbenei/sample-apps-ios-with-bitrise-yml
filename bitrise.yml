format_version: 1.0.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - PROJECT_TITLE: BitriseSampleWithYML
  - XCODE_PROJECT_PATH: ./${PROJECT_TITLE}.xcodeproj
  - XCODE_PROJECT_SCHEME: ${PROJECT_TITLE}
  # in a normal project you should moved these into the
  #  hidden .bitrise.secrets.yml file, so that it's not stored
  #  in your code repository
  - BITRISE_KEYCHAIN_PATH: $HOME/Library/Keychains/login.keychain
  - BITRISE_KEYCHAIN_PASSWORD: vagrant

workflows:

  _download_certs:
    description: |-
      This is a utility workflow, used by other workflows.
    steps:
    - git::https://github.com/bitrise-io/steps-certificate-and-profile-installer.git@master:
        description: |-
          This step will only be used in CI mode, on continuous integration
          servers / services (because of the `run_if` statement),
          but **NOT** when you run it on your own machine.
        run_if: .IsCI
        inputs:
        - keychain_path: $BITRISE_KEYCHAIN_PATH
        - keychain_password: $BITRISE_KEYCHAIN_PASSWORD

  test:
    steps:
    - xcode-test:
        title: Run Xcode test
        inputs:
        - project_path: ${XCODE_PROJECT_PATH}
        - scheme: ${XCODE_PROJECT_SCHEME}
        - simulator_device: iPhone 6
        - simulator_os_version: latest
        - is_clean_build: "no"

  analyze:
    before_run:
    - _download_certs
    steps:
    - script:
        title: Run Xcode analyze
        inputs:
        - content: xcodebuild -project "${XCODE_PROJECT_PATH}" -scheme "${XCODE_PROJECT_SCHEME}" analyze

  archive:
    description: |-
      This workflow will run Xcode archive on this project,
      but first it'll run the workflows listed in
      the `before_run` section.
    before_run:
    - test
    - _download_certs
    steps:
    - xcode-archive:
        title: Run Xcode archive
        inputs:
        - project_path: ${XCODE_PROJECT_PATH}
        - scheme: ${XCODE_PROJECT_SCHEME}

  master:
    description: |-
      This workflow is meant to be used on a CI server (like bitrise.io), for continuous
      deployment, but of course you can run it on your own Mac as well,
      except the Step which deploys to Bitrise.io - that's marked with
      a Run-If statement to be skipped, unless you run bitrise in --ci mode.
    before_run:
    - archive
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            echo "-> BITRISE_IPA_PATH: ${BITRISE_IPA_PATH}"
    - bitrise-ios-deploy:
        description: |-
          The long `run_if` here is a workaround. At the moment Bitrise.io
          defines the BITRISE_PULL_REQUEST environment
          in case the build was started by a Pull Request, and not the
          required PULL_REQUEST_ID - so we'll check for that instead.
        run_if: 'enveq "BITRISE_PULL_REQUEST" "" | and .IsCI'
        inputs:
        - notify_user_groups: none
        - is_enable_public_page: "yes"
    - slack:
        inputs:
        - webhook_url: "${SLACK_WEBHOOK_URL}"
        - channel: "${SLACK_CHANNEL}"
        - from_username: ${PROJECT_TITLE} - OK
        - from_username_on_error: ${PROJECT_TITLE} - ERROR
        - message: |-
            CI check - OK
            PULL_REQUEST_ID : ${PULL_REQUEST_ID}
            BITRISE_PUBLIC_INSTALL_PAGE_URL: ${BITRISE_PUBLIC_INSTALL_PAGE_URL}
        - message_on_error: |-
            CI check - FAILED
            PULL_REQUEST_ID : ${PULL_REQUEST_ID}
